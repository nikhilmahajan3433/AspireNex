# -*- coding: utf-8 -*-
"""MOVIE_RATING_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UsOSOZRUEkSBKTfA3JQ4c5sZ8Li2deTV
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_selection import mutual_info_regression
from sklearn.model_selection import train_test_split,GridSearchCV
from sklearn.metrics import r2_score,mean_squared_error
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LinearRegression

df=pd.read_csv("IMDb Movies India.csv",encoding="latin")
df.head()

df.shape

df.info()

df.describe(include=["float64","object"])

df.isnull().sum()

df.duplicated().sum()

df.drop_duplicates(inplace=True)

df.duplicated().sum()

df["Year"].unique()

df['Duration'].unique()

df['Votes'].unique()

df["Duration"]=df["Duration"].str.replace(" min","").astype(float)
df["Duration"].head()

df["Year"]=df["Year"].str.strip("()").astype(float)
df["Year"].head()

df["Votes"]=df["Votes"].str.replace(",","")

df["Votes"]=df["Votes"].str.replace("$5.16M","516",regex=False)

df["Votes"]=df["Votes"].astype(float)
df["Votes"].head()

df["Duration"].fillna(df["Duration"].median(),inplace=True)

df["Rating"].fillna(df["Rating"].mean(),inplace=True)

df["Votes"].fillna(df["Votes"].median(),inplace=True)

df.dropna(subset=["Genre","Actor 1","Year","Director","Actor 2","Actor 3"],inplace=True)

df.isnull().sum()

df.shape

df.nunique()

df["Genre"]=df["Genre"].str.split(",").explode("Genre").reset_index(drop=True)

df.head()

df.sort_values(by="Rating",ascending=False,inplace=True)

top10_genres=df["Genre"].value_counts().head(10)
plt.figure(figsize=(10,5))
bar=sns.barplot(x=top10_genres.index,y=top10_genres.values)
bar.bar_label(bar.containers[0])
plt.xlabel("Genres")
plt.ylabel("Values")
plt.title("Top 10 Genres")
plt.show()

top10_directors=df["Director"].head(10)
plt.figure(figsize=(15,5))
bar1=sns.barplot(x=top10_directors,y=df["Rating"])
bar1.bar_label(bar1.containers[0])
plt.xlabel("Directors")
plt.ylabel("Rating")
plt.title("Top 10 Directors")
plt.show()

top10_rated_films=df["Name"].head(10)
plt.figure(figsize=(15,5))
bar2=sns.barplot(x=top10_rated_films,y=df["Rating"])
bar2.bar_label(bar2.containers[0])
plt.xlabel("Films")
plt.ylabel("Rating")
plt.title("Top 10 Rated Films")
plt.show()

df.sort_values(by="Votes",ascending=False,inplace=True)
top10_popular_films=df["Name"].head(10)
plt.figure(figsize=(20,5))
bar3=sns.barplot(x=top10_popular_films,y=df["Votes"])
bar3.bar_label(bar3.containers[0])
plt.xlabel("Films")
plt.ylabel("Votes")
plt.title("Top 10 Popular Films")
plt.show()

actors=pd.concat([df['Actor 1'], df['Actor 2'], df['Actor 3']])
film_count=actors.value_counts()
top10_most_performing_actors=film_count.head(10)
plt.figure(figsize=(20,5))
bar4=sns.barplot(x=top10_most_performing_actors.index,y=top10_most_performing_actors.values)
bar4.bar_label(bar4.containers[0])
plt.xlabel("Actors")
plt.ylabel("Number of Films")
plt.title("Top 10 Most Performing Actors")
plt.show()

sns.displot(x=df["Rating"],color="red")
plt.title("Distribution of Rating")
plt.show()

sns.histplot(x=df["Year"])
plt.title("Distribution of Years")
plt.show()

sns.histplot(x=df["Duration"],kde=True,bins=30)
plt.title("Distribution of Duration")
plt.show()

sns.histplot(x=df["Votes"],kde=True,bins=10)
plt.title("Distribution of Votes")
plt.show()

sns.scatterplot(x=df["Duration"],y=df["Rating"],color="orange")
plt.title("Affect of Duration on Rating")
plt.show()

sns.scatterplot(x=df["Votes"],y=df["Rating"],color="g")
plt.title("Affect of Votes on Rating")
plt.show()

sns.regplot(x=df["Year"],y=df["Rating"],line_kws=dict(color="r"),scatter_kws=dict(color="pink"))
plt.title("Affect of Year on Rating")
plt.show()

""" TARGET ENCODING"""

df["Genre"]=df.groupby("Genre")["Rating"].transform("mean")
df["Director"]=df.groupby("Director")["Rating"].transform("mean")
df["Actor 1"]=df.groupby("Actor 1")["Rating"].transform("mean")
df["Actor 2"]=df.groupby("Actor 2")["Rating"].transform("mean")
df["Actor 3"]=df.groupby("Actor 3")["Rating"].transform("mean")
df["Name"]=df.groupby("Name")["Rating"].transform("mean")

df.head()

df.info()

"""# FEATURE  ENGINEERING"""

features=df.drop("Rating",axis=1)
target=df["Rating"]

""" # INFORMATION GAIN"""

from sklearn.feature_selection import mutual_info_regression

# Compute mutual information
values = mutual_info_regression(features, target)
mutual_info = pd.Series(values)
mutual_info.index = features.columns

# Create DataFrame
df = pd.DataFrame({"Feature": mutual_info.index, "Values": mutual_info})
df.sort_values(ascending=True, by="Values", inplace=True)
df["Values"] = df["Values"].round(3)

# Plot
plt.figure(figsize=(12, 6))  # Optional: to set figure size
bar2 = sns.barplot(x="Feature", y="Values", data=df)
bar2.bar_label(bar2.containers[0])
plt.title("INFORMATION GAIN")
plt.xticks(rotation=90)  # Optional: rotate x labels for better readability
plt.show()

"""# CORRELATION"""

sns.heatmap(df.corr(),annot=True,fmt=".2f",cmap='rainbow')
plt.show()

""" # SPLITTING df INTO TRAINING AND TESTING df"""

x_train,x_test,y_train,y_test=train_test_split(features,target,test_size=0.3,random_state=42)

x_train.shape

x_test.shape

"""# MODEL TRAINING"""

model=LinearRegression()
model.fit(x_train,y_train)
pred=model.predict(x_test)

"""# PERFORMANCE EVALUATION

#### MEAN SQUARED ERROR
"""

mse=mean_squared_error(pred,y_test)
round(mse,2)

"""# R SQUARED VALUE"""

score=r2_score(pred,y_test)
round(score,2)

sns.regplot(x=y_test,y=pred,line_kws=dict(color="r"),scatter_kws=dict(color="blue"))
plt.xlabel("Actual Rating")
plt.ylabel("Predicted Rating")
plt.title("Actual vs Predicted Rating")
plt.show()

residual=y_test-pred
plt.scatter(x=pred,y=residual,c="red")
plt.xlabel("Predicted Values")
plt.ylabel("Error")
plt.title("Residual Error")
plt.show()